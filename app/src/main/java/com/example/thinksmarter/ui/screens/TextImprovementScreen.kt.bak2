package com.example.thinksmarter.ui.screens

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ArrowBack
import androidx.compose.material.icons.filled.Create
import androidx.compose.material.icons.filled.Edit
import androidx.compose.material.icons.filled.Refresh
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.focus.focusRequester
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import com.example.thinksmarter.data.model.TextImprovement
import com.example.thinksmarter.domain.repository.ThinkSmarterRepository.TextImprovementEvaluation
import com.example.thinksmarter.ui.components.*
import com.example.thinksmarter.ui.theme.accent_blue
import com.example.thinksmarter.ui.theme.accent_green
import com.example.thinksmarter.ui.theme.accent_orange
import com.example.thinksmarter.ui.theme.accent_purple
import com.example.thinksmarter.ui.viewmodel.TextImprovementUiEvent
import com.example.thinksmarter.ui.viewmodel.TextImprovementUiState

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun TextImprovementScreen(
    uiState: TextImprovementUiState,
    onEvent: (TextImprovementUiEvent) -> Unit,
    onNavigateBack: () -> Unit,
    modifier: Modifier = Modifier
) {
    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Text Improvement") },
                navigationIcon = {
                    IconButton(onClick = onNavigateBack) {
                        Icon(Icons.Default.ArrowBack, contentDescription = "Back")
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.surface,
                    titleContentColor = MaterialTheme.colorScheme.onSurface,
                    navigationIconContentColor = MaterialTheme.colorScheme.onSurface
                )
            )
        }
    ) { paddingValues ->
        LazyColumn(
            modifier = modifier
                .fillMaxSize()
                .padding(paddingValues)
                .padding(horizontal = 16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp),
            contentPadding = PaddingValues(vertical = 16.dp)
        ) {
            // Error message
            item {
                uiState.error?.let { error ->
                    ErrorMessage(
                        message = error,
                        onDismiss = { onEvent(TextImprovementUiEvent.ClearError) },
                        modifier = Modifier.fillMaxWidth()
                    )
                }
            }

            // Text input section
            item {
                ModernCard(
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Column(
                        modifier = Modifier.padding(20.dp)
                    ) {
                        Row(
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Icon(
                                Icons.Default.Edit,
                                contentDescription = "Text Input",
                                tint = MaterialTheme.colorScheme.primary,
                                modifier = Modifier.size(24.dp)
                            )
                            Spacer(modifier = Modifier.width(12.dp))
                            Text(
                                text = "Enter Your Text",
                                style = MaterialTheme.typography.titleMedium,
                                fontWeight = FontWeight.Medium
                            )
                        }
                        
                        Spacer(modifier = Modifier.height(16.dp))
                        
                        // Text type selector
                        Text(
                            text = "Text Type",
                            style = MaterialTheme.typography.titleSmall,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                        Spacer(modifier = Modifier.height(8.dp))
                        
                        val textTypes = listOf("General", "Academic", "Business", "Creative", "Technical", "Persuasive")
                        Row(
                            modifier = Modifier.horizontalScroll(rememberScrollState()),
                            horizontalArrangement = Arrangement.spacedBy(8.dp)
                        ) {
                            textTypes.forEach { textType ->
                                ModernChip(
                                    text = textType,
                                    onClick = { onEvent(TextImprovementUiEvent.UpdateTextType(textType)) },
                                    selected = uiState.selectedTextType == textType,
                                    modifier = Modifier
                                )
                            }
                        }
                        
                        Spacer(modifier = Modifier.height(16.dp))
                        
                        // Text input
                        val focusRequester = remember { FocusRequester() }
                        LaunchedEffect(Unit) {
                            focusRequester.requestFocus()
                        }
                        
                        ModernTextField(
                            value = uiState.userText,
                            onValueChange = { onEvent(TextImprovementUiEvent.UpdateUserText(it)) },
                            label = "Your Text",
                            placeholder = "Enter the text you want to improve...",
                            minLines = 6,
                            maxLines = 12,
                            modifier = Modifier
                                .fillMaxWidth()
                                .focusRequester(focusRequester)
                        )
                        
                        Spacer(modifier = Modifier.height(16.dp))
                        
                        ModernButton(
                            text = "Analyze & Improve",
                            onClick = { onEvent(TextImprovementUiEvent.AnalyzeText) },
                            isLoading = uiState.isAnalyzing,
                            enabled = uiState.userText.isNotBlank() && !uiState.isAnalyzing,
                            modifier = Modifier.fillMaxWidth(),
                            icon = { Icon(Icons.Default.Refresh, contentDescription = null) }
                        )
                    }
                }
            }

            // Analysis results
            uiState.evaluation?.let { evaluation ->
                // Scores
                item {
                    ModernCard(
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Column(
                            modifier = Modifier.padding(20.dp)
                        ) {
                            Text(
                                text = "Analysis Results",
                                style = MaterialTheme.typography.titleMedium,
                                fontWeight = FontWeight.Medium
                            )
                            Spacer(modifier = Modifier.height(16.dp))
                            
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.spacedBy(8.dp)
                            ) {
                                ModernScoreCard(
                                    title = "Structure",
                                    score = evaluation.structureScore,
                                    modifier = Modifier.weight(1f),
                                    color = accent_blue
                                )
                                ModernScoreCard(
                                    title = "Clarity",
                                    score = evaluation.clarityScore,
                                    modifier = Modifier.weight(1f),
                                    color = accent_green
                                )
                            }
                            
                            Spacer(modifier = Modifier.height(8.dp))
                            
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.spacedBy(8.dp)
                            ) {
                                ModernScoreCard(
                                    title = "Impact",
                                    score = evaluation.impactScore,
                                    modifier = Modifier.weight(1f),
                                    color = accent_orange
                                )
                                ModernScoreCard(
                                    title = "Depth",
                                    score = evaluation.depthScore,
                                    modifier = Modifier.weight(1f),
                                    color = accent_purple
                                )
                            }
                        }
                    }
                }

                // Structure feedback
                item {
                    ModernCard(
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Column(
                            modifier = Modifier.padding(20.dp)
                        ) {
                            Row(
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Icon(
                                    Icons.Default.Create,
                                    contentDescription = "Structure",
                                    tint = MaterialTheme.colorScheme.primary,
                                    modifier = Modifier.size(24.dp)
                                )
                                Spacer(modifier = Modifier.width(12.dp))
                                Text(
                                    text = "Structure Feedback",
                                    style = MaterialTheme.typography.titleMedium,
                                    fontWeight = FontWeight.Medium
                                )
                            }
                            Spacer(modifier = Modifier.height(16.dp))
                            Text(
                                text = evaluation.structureFeedback,
                                style = MaterialTheme.typography.bodyMedium,
                                lineHeight = MaterialTheme.typography.bodyMedium.lineHeight * 1.2f
                            )
                        }
                    }
                }

                // Clarity feedback
                item {
                    ModernCard(
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Column(
                            modifier = Modifier.padding(20.dp)
                        ) {
                            Row(
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Icon(
                                    Icons.Default.Edit,
                                    contentDescription = "Clarity",
                                    tint = MaterialTheme.colorScheme.secondary,
                                    modifier = Modifier.size(24.dp)
                                )
                                Spacer(modifier = Modifier.width(12.dp))
                                Text(
                                    text = "Clarity Feedback",
                                    style = MaterialTheme.typography.titleMedium,
                                    fontWeight = FontWeight.Medium
                                )
                            }
                            Spacer(modifier = Modifier.height(16.dp))
                            Text(
                                text = evaluation.clarityFeedback,
                                style = MaterialTheme.typography.bodyMedium,
                                lineHeight = MaterialTheme.typography.bodyMedium.lineHeight * 1.2f
                            )
                        }
                    }
                }

                // Word and phrase suggestions
                item {
                    if (evaluation.wordAndPhraseSuggestions.isNotBlank()) {
                        ModernCard(
                            modifier = Modifier.fillMaxWidth()
                        ) {
                            Column(
                                modifier = Modifier.padding(20.dp)
                            ) {
                                Row(
                                    verticalAlignment = Alignment.CenterVertically
                                ) {
                                    Icon(
                                        Icons.Default.Edit,
                                        contentDescription = "Word Suggestions",
                                        tint = MaterialTheme.colorScheme.secondary,
                                        modifier = Modifier.size(24.dp)
                                    )
                                    Spacer(modifier = Modifier.width(12.dp))
                                    Text(
                                        text = "Word & Phrase Suggestions",
                                        style = MaterialTheme.typography.titleMedium,
                                        fontWeight = FontWeight.Medium
                                    )
                                }
                                Spacer(modifier = Modifier.height(16.dp))
                                Text(
                                    text = evaluation.wordAndPhraseSuggestions,
                                    style = MaterialTheme.typography.bodyMedium,
                                    lineHeight = MaterialTheme.typography.bodyMedium.lineHeight * 1.2f
                                )
                            }
                        }
                    }
                }

                // Improved version
                item {
                    ModernCard(
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Column(
                            modifier = Modifier.padding(20.dp)
                        ) {
                            Row(
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Icon(
                                    Icons.Default.Create,
                                    contentDescription = "Improved Version",
                                    tint = MaterialTheme.colorScheme.tertiary,
                                    modifier = Modifier.size(24.dp)
                                )
                                Spacer(modifier = Modifier.width(12.dp))
                                Text(
                                    text = "Improved Version",
                                    style = MaterialTheme.typography.titleMedium,
                                    fontWeight = FontWeight.Medium
                                )
                            }
                            Spacer(modifier = Modifier.height(16.dp))
                            Text(
                                text = evaluation.improvedVersion,
                                style = MaterialTheme.typography.bodyMedium,
                                lineHeight = MaterialTheme.typography.bodyMedium.lineHeight * 1.2f
                            )
                        }
                    }
                }

                // Specific improvements
                item {
                    ModernCard(
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Column(
                            modifier = Modifier.padding(20.dp)
                        ) {
                            Row(
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Icon(
                                    Icons.Default.Edit,
                                    contentDescription = "Improvements",
                                    tint = MaterialTheme.colorScheme.tertiary,
                                    modifier = Modifier.size(24.dp)
                                )
                                Spacer(modifier = Modifier.width(12.dp))
                                Text(
                                    text = "Specific Improvements Made",
                                    style = MaterialTheme.typography.titleMedium,
                                    fontWeight = FontWeight.Medium
                                )
                            }
                            Spacer(modifier = Modifier.height(16.dp))
                            Text(
                                text = evaluation.specificImprovements,
                                style = MaterialTheme.typography.bodyMedium,
                                lineHeight = MaterialTheme.typography.bodyMedium.lineHeight * 1.2f
                            )
                        }
                    }
                }

                // Further development suggestions
                item {
                    ModernCard(
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Column(
                            modifier = Modifier.padding(20.dp)
                        ) {
                            Row(
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Icon(
                                    Icons.Default.Create,
                                    contentDescription = "Development",
                                    tint = MaterialTheme.colorScheme.primary,
                                    modifier = Modifier.size(24.dp)
                                )
                                Spacer(modifier = Modifier.width(12.dp))
                                Text(
                                    text = "Further Development Suggestions",
                                    style = MaterialTheme.typography.titleMedium,
                                    fontWeight = FontWeight.Medium
                                )
                            }
                            Spacer(modifier = Modifier.height(16.dp))
                            Text(
                                text = evaluation.furtherDevelopmentSuggestions,
                                style = MaterialTheme.typography.bodyMedium,
                                lineHeight = MaterialTheme.typography.bodyMedium.lineHeight * 1.2f
                            )
                        }
                    }
                }

                // Clear evaluation button
                item {
                    ModernButton(
                        text = "Analyze New Text",
                        onClick = { onEvent(TextImprovementUiEvent.ClearEvaluation) },
                        modifier = Modifier.fillMaxWidth(),
                        icon = { Icon(Icons.Default.Refresh, contentDescription = null) }
                    )
                }
            }

            // Recent improvements
            if (uiState.textImprovements.isNotEmpty()) {
                item {
                    Text(
                        text = "Recent Improvements",
                        style = MaterialTheme.typography.titleLarge,
                        fontWeight = FontWeight.Bold,
                        modifier = Modifier.padding(vertical = 8.dp)
                    )
                }
                
                items(uiState.textImprovements.take(5)) { textImprovement ->
                    ModernCard(
                        modifier = Modifier.fillMaxWidth()
                    ) {
                        Column(
                            modifier = Modifier.padding(16.dp)
                        ) {
                            Text(
                                text = textImprovement.originalText.take(100) + if (textImprovement.originalText.length > 100) "..." else "",
                                style = MaterialTheme.typography.bodyMedium,
                                maxLines = 3
                            )
                            Spacer(modifier = Modifier.height(8.dp))
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.SpaceBetween
                            ) {
                                Text(
                                    text = textImprovement.textType,
                                    style = MaterialTheme.typography.bodySmall,
                                    color = MaterialTheme.colorScheme.onSurfaceVariant
                                )
                                Text(
                                    text = "Score: ${(textImprovement.structureScore + textImprovement.clarityScore + textImprovement.impactScore + textImprovement.depthScore) / 4}",
                                    style = MaterialTheme.typography.bodySmall,
                                    color = MaterialTheme.colorScheme.primary,
                                    fontWeight = FontWeight.Medium
                                )
                            }
                        }
                    }
                }
            }
        }
    }
} 